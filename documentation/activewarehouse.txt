h1. Introduction

The ActiveWarehouse plugin provides the basis for constructing a data warehouse reporting application with Ruby on Rails. ActiveWarehouse defines base classes that model common patterns in data warehousing such as facts, dimensions, cubes, aggregates and more.

h1. Installing

ActiveWarehouse is a plugin for Ruby on Rails. You will need to install Ruby, RubyGems and Ruby on Rails first. Once Rails is installed you will need to create a Rails application. Once the Rails application has been created, cd into the new Rails application's base directory and type:

<div class="code">
script/plugin install svn://rubyforge.org/var/svn/activewarehouse/activewarehouse/trunk
</div>

h1. Facts

Facts represent the measures of a business. For example, a fact table might have one row for each point-of-sale transaction that has occurred. The fact table would hold both foreign key references to the dimensions that are relevant for that fact as well as a set of measurements for the fact. The measurements might include things like sale amount, quantity, etc.

To construct a fact in ActiveWarehouse:

<div class="code">
script/generate fact <i>name</i>
</div>

This will create several code files, including:

* A class called <i>Name</i>Fact that extends from ActiveWarehouse::Fact
* A migration called something like 001_create_<i>name</i>_fact
* A test stub for the fact

h1. Dimensions

Dimensions represent the elements and entities in a business. Examples of dimensions include date, products, employees, users, stores, etc. Dimensions include a surrogate primary key along with as many attributes about the dimension as possible.

To construct a dimension in ActiveWarehouse:

<div class="code">
script/generate dimension <i>name</i>
</div>

This will create several code files, including:

* A class called <i>Name</i>Dimension that extends from ActiveWarehouse::Dimension
* A migration called something like 001_create_<i>name</i>_dimension
* A test stub for the dimension

h2. Date Dimensions

<div class="code">
script/generate date_dimension
</div>

h2. Slowly Changing Dimensions

There are several types of slowly changing dimensions. Type 1 slowly changing dimensions are implemented by replacing an existing attribute in a row in the dimension table. Type 2 slowly changing dimensions include an effective date and an expiration date on each row in the dimension. When a change occurs for a dimension the old row is updated, setting the expiration date and a new row is inserted with the current date as the effective date and an expiration date at the maximum value in the future allowed.

<div class="ruby">
class EmployeeDimension < ActiveWarehouse::Dimension
  acts_as_slowly_changing_dimension
end
</div>

h2. Ragged Hierarchies

Ragged hierarchies are hierarchies where each branch can be to any depth, and the depth between branches may vary. These types of hierarchies are used to model things like corporate structures.

In ActiveWarehouse you can use the HierarchalDimension mixin to add hierarchical dimension behavior to any of your dimension classes.

<div class="ruby">
class EmployeeDimension < ActiveWarehouse::Dimension
  acts_as_hierarchical_dimension
end
</div>

h2. Role-Playing Dimensions

Role-playing dimensions are essentially views on top of an existing dimension that provides an prefixed name for each field in the dimension. The idea behind this is to allow facts to reference the same dimension by different names without needing utilize additional storage space. The most common use pattern is with dates. Consider a date fact

h1. Bridges

h1. Cubes

To create a cube in ActiveWarehouse:

<div class="code">
script/generate cube transaction
</div>

h1. Aggregates

Aggregates are the workhorses of ActiveWarehouse. Aggregates provide the logic for aggregating values in fact tables across one or more dimensions.

h2. NoAggregate

The default aggregate implementation in ActiveWarehouse is the NoAggregate. This aggregate maps from a cube query to a SQL query.

h1. Reports

Report classes contain information on how to build a report from a cube. Currently only the TableReport class is implemented.

h2. AbstractReport

The AbstractReport abstract base class provides the following attributes:

<dl>
  <dt>:pass_params</dt>
  <dd></dd>
  <dt>:column_filters</dt>
  <dd></dd>
  <dt>:row_filters</dt>
  <dd></dd>
  <dt>:conditions</dt>
  <dd>Optional conditions String.</dd>
  <dt>:cube_name</dt>
  <dd>Specify the cube name.</dd>
</dl>

h2. TableReport

The TableReport class extends from the AbstractReport and adds additional parameters used for tabular reports.

<dl>
  <dt>:format</dt>
  <dd></dd>
  <dt>:link_cell</dt>
  <dd></dd>
  <dt>:html_params</dt>
  <dd></dd>
</dl> 

h1. View Helpers

ActiveWarehouse currently comes with only a single view helper called <code>report_helper</code>. This helper is used to create an HTML report given a Report instance. The report_helper method has one required argument and one optional argument:

<div class="ruby">
report_helper(report, html_options={})
</div>

The report is an instance of a Report class. Currently only the TableReport is implemented. The HTML options is a Hash of options used during the rendering of the HTML table. It currently accepts the following name/value pairs:

<dl>
  <dt>:report_class</dt>
  <dd>The CSS class name used for styling the report. The default value is 'report'.</dd>
</dl>

h1. License

<pre>
Copyright (c) 2006-2007 Anthony Eden

Permission is hereby granted, free of charge, to any person obtaining a copy of this
software and associated documentation files (the "Software"), to deal in the Software 
without restriction, including without limitation the rights to use, copy, modify, merge, 
publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons 
to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or 
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE 
FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
DEALINGS IN THE SOFTWARE.
</pre>